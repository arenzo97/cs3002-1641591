plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(IrisPrediction), main = "Predicted values")
rep = 5
splitScreen(3,1)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain))
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(IrisPrediction), main = "Predicted values")
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values 5.1 vs 3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(IrisPrediction), main = "Predicted values")
rep = 5
accuracyKnnVector <- vector( mode = "numeric", length = rep)
Kvector <- vector( mode = "integer", length = rep)
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i + 1)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i + 1
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = accuracyVector[1], "CP 0.08" = accuracyVector[2], "CP 0.1" = accuracyVector[3], "CP 0.5" = accuracyVector[4],"CP 0.6" = accuracyVector[5])
print(df)
rep = 5
accuracyKnnVector <- vector( mode = "numeric", length = rep)
Kvector <- vector( mode = "integer", length = rep)
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i + 1)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i + 1
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = accuracyVector[1], "CP 0.08" = accuracyVector[2], "CP 0.1" = accuracyVector[3], "CP 0.5" = accuracyVector[4],"CP 0.6" = accuracyVector[5])
print(df)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = accuracyKnnVector[1], "CP 0.08" = accuracyKnnVector[2], "CP 0.1" = accuracyKnnVector[3], "CP 0.5" = accuracyKnnVector[4],"CP 0.6" = accuracyKnnVector[5])
print(df)
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.5,0.6)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
rep = 5
accuracyKnnVector <- vector( mode = "numeric", length = rep)
Kvector <- vector( mode = "integer", length = rep)
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i + 1)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i + 1
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i + 1
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
accuracyKnnVector <- vector( mode = "numeric", length = rep)
Kvector <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i + 1
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
Kvector[i] = i
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
Kvector[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 5
accuracyKnnVector <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
accuracyKnnVector[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = accuracyKnnVector,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = Kvector, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
splitScreen(3,1)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values of 5.1 vs 3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(IrisPrediction), main = "Predicted values")
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values of X5.1 vs X3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(IrisPrediction), main = "Predicted values")
rep = 5
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/mario.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
cpvalues <- c(0.04, 0.08, 0.1,0.5,0.6)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.5,0.6)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
splitScreen(3,1)
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.5,0.6)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.5)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
#2 Test accuracy by pruning
splitScreen(2, 3)
splitScreen <- function(x ,y){
par(mfrow=c(y,x))
}
#set data file, class and values
iris = read.csv('iris.csv', sep=",")
#Set Directory to this current directory
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
splitScreen <- function(x ,y){
par(mfrow=c(y,x))
}
#set data file, class and values
iris = read.csv('iris.csv', sep=",")
irisReal = read.csv('iris_real.csv', sep=",")
# returns a list
TrainingSet<-function(idataClass,idataValues)
{
idataClassTrain = idataClass[1:100]
idataValuesTrain = idataValues[1:100,]
result <- list(idataClassTrain, idataValuesTrain)
return(result)
}
TestSet<-function(idataClass,idataValues,setValues)
{
idataClassTest = idataClass[setValues]
idataValuesTest= idataValues[setValues,]
}
#KNN Function
KNN<-function(valuesTrain,valuesTest,classTrain,kvalue)
{
knn3pred = knn(valuesTrain,valuesTest,classTrain,kvalue)
return(knn3pred)
}
#Decision trees
DecisionTree<-function(trainSet,methodType,dataset)
{
plot(fit, uniform=TRUE, main="Decision Tree for",trainSet)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
return(fit)
}
PlotTree <- function(fit, type, title)
{
rpart.plot(x = fit, type = type, main = title, box.palette = list("#552586","#804FB3","#B589D6"))
}
# Calculate accuracy
Accuracy<-function(actualValues,testValues)
{
n=length(testValues)
ncorrect=sum(actualValues==testValues)
result = ncorrect/n
print(result)
return(result)
}
#1 Create Decision Tree for Iris Classes
iris_rand<-cbind(irisReal,iris)
iris_rand=iris_rand[sample(149,149),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(treepred), main = "Predicted values")
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = knnAccuracies, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = knnAccuracies, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 5
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.5)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
splitScreen(3,1)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values of X5.1 vs X3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(treepred), main = "Predicted values")
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.6)
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
splitScreen(3,1)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values of X5.1 vs X3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(treepred), main = "Predicted values")
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/mario.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
splitScreen(3,1)
plot(x = irisValuesTrain$X5.1, y = irisValuesTrain$X3.5, col = c(irisClassTrain), main = "ValuesTrain Values of X5.1 vs X3.5")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$X5.1, y = irisValuesTest$X3.5,
col = c(treepred), main = "Predicted values")
rep = 5
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
rep = 6
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 10
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
rep = 8
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
rep = 10
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
View(irisTrainfit)
View(irisValuesTrain)
#set data file, class and values
iris = read.csv('iris.csv', head = FALSE,sep=",")
irisReal = read.csv('iris_real.csv',head = FALSE, sep=",")
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
View(irisReal)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
#1 Create Decision Tree for Iris Classes
iris_rand<-cbind(irisReal,iris)
iris_rand=iris_rand[sample(149,149),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
treepred <- predict(irisTrainfit,irisValuesTest, type = 'class')
rpart.plot(x = irisTrainfit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#325aa8","#325ee8","#325ae8"))
#2 Test accuracy by pruning
splitScreen(2, 3)
cpvalues <- c(0.04, 0.08, 0.1,0.4,0.5)
cpLength = length(cpvalues)
prunedTreesAccuracies <- vector( mode = "numeric", length = cpLength)
prunedTreesFitValues<-list()
for (i in 1:5)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotTree(prunedTree, 4,sprintf('Decision tree with cp = %g', cpvalues[i]))
prunedTreesAccuracies[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
splitScreen(3,1)
plot(x = irisValuesTrain$V1, y = irisValuesTrain$V2, col = c(irisClassTrain), main = "ValuesTrain Values of V1 vs V2")
plot(x = irisValuesTest$V1, y = irisValuesTest$V2,
col = c(irisClassTest), main = "Test values")
plot(x = irisValuesTest$V1, y = irisValuesTest$V2,
col = c(treepred), main = "Predicted values")
rep = 10
knnAccuracies <- vector( mode = "numeric", length = rep)
KValues <- vector( mode = "integer", length = rep)
#Print Accuracy values of KNN and Pruned Trees using different values of k
for (i in 1 : rep) {
knnPrediction = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k = i)
knnAccuracies[i] = Accuracy(knnPrediction, irisClassTest)
KValues[i] = i
}
df = data.frame("K" = KValues, "KNN Accuracies" = knnAccuracies,
"CP 0.04" = prunedTreesAccuracies[1], "CP 0.08" = prunedTreesAccuracies[2], "CP 0.1" = prunedTreesAccuracies[3], "CP 0.5" = prunedTreesAccuracies[4],"CP 0.6" = prunedTreesAccuracies[5])
print(df)
