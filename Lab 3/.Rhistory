source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
accuracyVector[i]
}
cpvalues <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
#irisPrune=Prune(irisTrainfit,0.9)
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
accuracyVector[i]
}
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
iris_rand=iris[sample(150,150),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
# Test accuracy by pruning
cpvalues <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
# Test accuracy by pruning
cpvalues <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
accuracyVector <- vector( mode = "numeric", length = cpvalues)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
irisPrune<-prune(irisTrainfit,cp=0.1)
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotPrune(prunedTree)
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
View(irisValuesTest)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotPrune(prunedTree)
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
PlotPrune<-function(pfit)
{
plot(pfit,uniform=TRUE,main="Pruned Decision Tree for")
text(pfit,use.n=TRUE, all=TRUE,cex=.8)
}
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotPrune(prunedTree)
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[1])
PlotPrune(prunedTree)
Prune(prunedTree)
PlotPrune(prunedTree)
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[1])
View(prunedTree)
View(prunedTree)
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=0.1)
View(prunedTree)
printTree(prunedTree,4,"0.1")
printTree <- function(fit, type, title){
rpart.plot(x = fit, type = type, main = title, box.palette = list("#552586","#804FB3","#B589D6"))
}
printTree(prunedTree,4,"0.1")
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
# Create Decision Tree for Iris Classe
iris_rand=iris[sample(149,149),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
# Test accuracy by pruning
cpvalues <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=0.1)
printTree(prunedTree,4,"0.1")
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/mario.r')
rpart.plot(x = fit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#552586","#804FB3","#B589D6"))
# rpart predict the classes according to the values
fit <- rpart(irisClassTrain~., method="class", data=irisValuesTrain)
# rpart predict the classes according to the values
fit <- rpart(irisClassTrain~., method="class", data=irisValuesTrain)
View(fit)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/1641591_1.r')
View(irisTrainfit)
View(fit)
# rpart predict the classes according to the values
fit <- rpart(irisClassTrain~., method="class", data=irisValuesTrain)
source('C:/Projects/CS3002/cs3002-1641591/Lab 3/mario.r')
# rpart predict the classes according to the values
fit <- rpart(irisClassTrain~., method="class", data=irisValuesTrain)
rpart.plot(x = fit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#552586","#804FB3","#B589D6"))
rpart.plot(x = fit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#552586","#804FB3","#B589D6"))
# Create Decision Tree for Iris Classe
iris_rand=iris[sample(149,149),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
rpart.plot(x = fit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#552586","#804FB3","#B589D6"))
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
rpart.plot(x = irisTrainfit, type = 4, main = "Decision Tree for IrisData",
box.palette = list("#552586","#804FB3","#B589D6"))
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
irisReal = read.csv('iris_real.csv', sep=",")
# Create Decision Tree for Iris Classes
iris_rand<-cbind(irisReal,iris)
iris_rand=iris_rand[sample(149,149),]
irisClass = iris_rand[,1]
irisValues = iris_rand[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[101:149]
irisValuesTest = irisValues[101:149,]
irisTrainfit <- rpart(irisClassTrain~., method = "class", data=irisValuesTrain)
plot(irisTrainfit, uniform=TRUE, main="Decision Tree")
text(irisTrainfit, use.n=FALSE, all=FALSE, cex=0.7)
# Test accuracy by pruning
cpvalues <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=0.1)
printTree(prunedTree,4,"0.1")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[1])
printTree(prunedTree,4,"0.1")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[2])
printTree(prunedTree,4,"0.1")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[2])
printTree(prunedTree,4,"0.1")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[2])
printTree(prunedTree,4,"0.1")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[3])
printTree(prunedTree,4,"CP Valu 0.3")
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[1])
# Test accuracy by pruning
cpvalues <- c(0.01,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
accuracyVector <- vector( mode = "numeric", length = length(cpvalues))
#irisPrune=Prune(irisTrainfit,0.9)
prunedTree<-prune(irisTrainfit,cp=cpvalues[1])
printTree(prunedTree,4,"CP Valu 0.3")
for (i in 1:9)
{
prunedTree<-prune(irisTrainfit,cp=cpvalues[i])
PlotPrune(prunedTree)
accuracyVector[i]=Accuracy(predict(prunedTree,irisValuesTest,type = 'class'),irisClassTest)
}
